{
  "name": "restaurant-ai-system",
  "version": "1.0.0",
  "description": "AI-powered restaurant operations optimization system",
  "private": true,
  "workspaces": [
    "backend",
    "frontend",
    "shared"
  ],
  "scripts": {
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm run dev",
    "build": "npm run build:backend && npm run build:frontend",
    "build:backend": "cd backend && npm run build",
    "build:frontend": "cd frontend && npm run build",
    "test": "npm run test:backend && npm run test:frontend",
    "test:backend": "cd backend && npm test",
    "test:frontend": "cd frontend && npm test",
    "test:watch": "concurrently \"npm run test:backend -- --watch\" \"npm run test:frontend -- --watch\"",
    "lint": "npm run lint:backend && npm run lint:frontend",
    "lint:backend": "cd backend && npm run lint",
    "lint:frontend": "cd frontend && npm run lint",
    "docker:up": "docker-compose up -d db redis",
    "docker:down": "docker-compose down",
    "db:migrate": "cd backend && npm run db:migrate",
    "db:seed": "cd backend && npm run db:seed",
    "setup": "npm install && npm run docker:up && echo 'Waiting for databases to start...' && sleep 10 && npm run db:migrate && npm run db:seed && echo '\\nâœ… Setup complete!\\n\\nðŸš€ Next steps:\\n   npm run dev    # Start both servers\\n   npm run dev:backend    # Start only backend (port 3001)\\n   npm run dev:frontend   # Start only frontend (port 3000)\\n'"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "overrides": {
    "inflight": "npm:@aashutoshrathi/word-wrap@1.2.6",
    "glob": "^10.4.5",
    "rimraf": "^5.0.10"
  }
}