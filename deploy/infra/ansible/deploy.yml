---
- name: CostFX Infra Orchestration
  hosts: localhost
  vars:
    app_name: "{{ app_name | default('costfx') }}"
    region: "{{ region | default('us-west-2') }}"
    env: "{{ env | default('dev') }}"
  tasks:
    - name: Ensure AWS CLI present
      command: aws --version
      register: aws_cli
      changed_when: false
      tags: [always]

    - name: Bootstrap remote state (bucket + table + backend file)
      environment:
        AWS_REGION: "{{ region }}"
        ENV: "{{ env }}"
      command: bash scripts/bootstrap-remote-state.sh {{ env }}
      args:
        chdir: "{{ terraform_root }}"
      tags: [bootstrap]

    - name: Terraform init (per-env backend)
      command: terraform init -reconfigure -backend-config=backend-{{ env }}.hcl -input=false
      args:
        chdir: "{{ terraform_root }}"
      tags: [core, services, images]

    - name: Terraform apply core (no ECS)
      command: >
        terraform apply -auto-approve
        -var-file=environments/{{ env }}/terraform.tfvars
        -var create_ecs=false
        -var backend_image=placeholder
        -var frontend_image=placeholder
      args:
        chdir: "{{ terraform_root }}"
      tags: [core]

    - name: Build & push images
      environment:
        AWS_REGION: "{{ region }}"
        GIT_SHA: "{{ lookup('pipe','git rev-parse --short HEAD') }}"
        AWS_ACCOUNT_ID: "{{ lookup('pipe','aws sts get-caller-identity --query Account --output text') }}"
      command: bash scripts/build-push-images.sh {{ env }}
      args:
        chdir: "{{ terraform_root }}"
      tags: [images]

    - name: Read backend image digest
      slurp:
        src: "{{ terraform_root }}/environments/{{ env }}/.backend_image"
      register: backend_img
      tags: [images, services]

    - name: Read frontend image digest
      slurp:
        src: "{{ terraform_root }}/environments/{{ env }}/.frontend_image"
      register: frontend_img
      tags: [images, services]

    - name: Terraform apply services (ECS)
      command: >
        terraform apply -auto-approve
        -var-file=environments/{{ env }}/terraform.tfvars
        -var backend_image={{ (backend_img.content | b64decode) | default('missing', true) }}
        -var frontend_image={{ (frontend_img.content | b64decode) | default('missing', true) }}
        -var create_ecs=true
      args:
        chdir: "{{ terraform_root }}"
      tags: [services]

    - name: Get ALB DNS output
      command: terraform output -raw alb_dns
      args:
        chdir: "{{ terraform_root }}"
      register: alb_dns
      changed_when: false
      tags: [verify]

    - name: Wait for services warm-up
      wait_for:
        timeout: 60
      tags: [verify]

    - name: Check backend /health
      uri:
        url: "http://{{ alb_dns.stdout }}/health"
        method: GET
        return_content: true
      register: health_resp
      failed_when: health_resp.status not in [200]
      tags: [verify]

    - name: Output health body
      debug:
        msg: "Backend health: {{ health_resp.json }}"
      tags: [verify]

    - name: Check backend /api/v1/
      uri:
        url: "http://{{ alb_dns.stdout }}/api/v1/"
        method: GET
        return_content: true
      register: api_resp
      failed_when: api_resp.status not in [200]
      tags: [verify]

    - name: Frontend root HEAD
      uri:
        url: "http://{{ alb_dns.stdout }}/"
        method: GET
        return_content: false
      register: fe_resp
      failed_when: fe_resp.status not in [200, 301, 302]
      tags: [verify]

    - name: Summary
      debug:
        msg: |
          Deployment complete.
          ALB: http://{{ alb_dns.stdout }}
          Backend /health status: {{ health_resp.status }}
          API root status: {{ api_resp.status }}
          Frontend status: {{ fe_resp.status }}
      tags: [verify]
