name: CostFX Deploy to AWS

on:
  push:
    branches:
      - main
      - develop
      - feature/aws-deploy-v1  # Include your current branch
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_BACKEND: costfx-backend
  ECR_REPOSITORY_FRONTEND: costfx-frontend

jobs:
  # Test the containers locally first
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test containers
        run: |
          chmod +x deploy/scripts/test-local.sh
          GITHUB_ACTIONS=true deploy/scripts/test-local.sh test

  # Build and push Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      backend-image: ${{ steps.backend-image.outputs.image }}
      frontend-image: ${{ steps.frontend-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        id: backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -f deploy/docker/Dockerfile.backend .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        id: frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Determine API URL based on environment
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            API_URL="https://api.costfx.app/api/v1"
          else
            API_URL="https://dev-api.costfx.app/api/v1"
          fi
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
            -f deploy/docker/Dockerfile.frontend \
            --target production \
            --build-arg VITE_API_URL=$API_URL .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Deploy infrastructure with Terraform
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Set environment
        id: set-env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        working-directory: deploy/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=infrastructure/${{ steps.set-env.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        working-directory: deploy/terraform
        run: |
          terraform plan \
            -var="environment=${{ steps.set-env.outputs.environment }}" \
            -var="backend_image=${{ needs.build.outputs.backend-image }}" \
            -var="frontend_image=${{ needs.build.outputs.frontend-image }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: deploy/terraform
        run: terraform apply -auto-approve tfplan

      - name: Get outputs
        working-directory: deploy/terraform
        run: |
          echo "Load Balancer URL: $(terraform output -raw load_balancer_url)"
          echo "Backend URL: $(terraform output -raw backend_url)"

  # Health check deployment
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Set environment
        id: set-env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Get deployment URLs
        working-directory: deploy/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=infrastructure/${{ steps.set-env.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          
          LOAD_BALANCER_URL=$(terraform output -raw load_balancer_url)
          BACKEND_URL=$(terraform output -raw backend_url)
          
          echo "LOAD_BALANCER_URL=$LOAD_BALANCER_URL" >> $GITHUB_ENV
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV

      - name: Health check backend
        run: |
          echo "Testing backend health..."
          for i in {1..30}; do
            if curl -f -s "${{ env.BACKEND_URL }}/api/v1/" > /dev/null; then
              echo "✅ Backend is healthy!"
              break
            fi
            echo "Attempt $i/30: Backend not ready, waiting..."
            sleep 30
          done

      - name: Health check frontend
        run: |
          echo "Testing frontend health..."
          for i in {1..30}; do
            if curl -f -s "${{ env.LOAD_BALANCER_URL }}" > /dev/null; then
              echo "✅ Frontend is healthy!"
              break
            fi
            echo "Attempt $i/30: Frontend not ready, waiting..."
            sleep 30
          done

      - name: Test API endpoints
        run: |
          echo "Testing core API endpoints..."
          
          # Test restaurant endpoints
          curl -f -s "${{ env.BACKEND_URL }}/api/v1/restaurants" || echo "⚠️ Restaurants endpoint not ready"
          
          # Test agent endpoints  
          curl -f -s "${{ env.BACKEND_URL }}/api/v1/agents/health" || echo "⚠️ Agents health endpoint not ready"
          
          echo "🎉 Deployment health check completed!"
