name: CostFX App Deployment

on:
  push:
    branches:
      - main
      - develop
      - feature/**
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'shared/**'
      - '.env*'
      - 'package.json'
      - 'deploy/docker/**'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'shared/**'
      - '.env*'
      - 'package.json'
      - 'deploy/docker/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_BACKEND: costfx-dev-backend
  ECR_REPOSITORY_FRONTEND: costfx-dev-frontend
  ECS_CLUSTER: costfx-dev
  ECS_SERVICE_BACKEND: costfx-dev-backend
  ECS_SERVICE_FRONTEND: costfx-dev-frontend

jobs:
  # Determine if deployment should proceed
  setup:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for app changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'shared/**'
              - 'deploy/docker/Dockerfile.backend'
            frontend:
              - 'frontend/**'
              - 'shared/**'
              - 'deploy/docker/Dockerfile.frontend'
            env:
              - '.env*'
              - 'package.json'

      - name: Determine deployment
        id: check
        run: |
          if [[ "${{ steps.changes.outputs.backend }}" == "true" || "${{ steps.changes.outputs.frontend }}" == "true" || "${{ steps.changes.outputs.env }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 App changes detected, will deploy"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No app changes detected, skipping deployment"
          fi

  # Run application tests (MUST PASS for deployment)
  test:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Run backend tests
        if: needs.setup.outputs.backend_changed == 'true'
        env:
          NODE_ENV: test
        run: |
          echo "🧪 Running backend unit tests (mocked)..."
          cd backend
          npm test
          echo "✅ Backend tests passed!"

      - name: Run frontend tests
        if: needs.setup.outputs.frontend_changed == 'true'
        run: |
          echo "🧪 Running frontend tests..."
          cd frontend
          npm test
          echo "✅ Frontend tests passed!"

      - name: Run linting (warnings allowed)
        continue-on-error: true
        run: |
          echo "🔍 Running linting checks..."
          if [[ "${{ needs.setup.outputs.backend_changed }}" == "true" ]]; then
            echo "Linting backend..."
            cd backend && npm run lint || echo "⚠️ Backend linting issues detected (proceeding anyway)"
            cd ..
          fi
          if [[ "${{ needs.setup.outputs.frontend_changed }}" == "true" ]]; then
            echo "Linting frontend..."
            cd frontend && npm run lint || echo "⚠️ Frontend linting issues detected (proceeding anyway)"
            cd ..
          fi
          echo "📋 Linting check completed"

  # Test Docker builds (after application tests pass)
  docker-test:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test backend Docker build
        if: needs.setup.outputs.backend_changed == 'true'
        run: |
          echo "🐳 Testing backend Docker build..."
          docker build -f deploy/docker/Dockerfile.backend --target test .

      - name: Test frontend Docker build
        if: needs.setup.outputs.frontend_changed == 'true'
        run: |
          echo "🐳 Testing frontend Docker build..."
          docker build -f deploy/docker/Dockerfile.frontend --target test .

  # Build and push Docker images
  build:
    needs: [setup, test, docker-test]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.should_deploy == 'true'
    outputs:
      backend_image: ${{ steps.backend.outputs.image }}
      frontend_image: ${{ steps.frontend.outputs.image }}
      backend_built: ${{ steps.backend.outputs.built }}
      frontend_built: ${{ steps.frontend.outputs.built }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        id: backend
        if: needs.setup.outputs.backend_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ Building backend image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
            -f deploy/docker/Dockerfile.backend \
            --target production .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "built=true" >> $GITHUB_OUTPUT
          echo "✅ Backend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG"

      - name: Build and push frontend image
        id: frontend
        if: needs.setup.outputs.frontend_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ Building frontend image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
            -f deploy/docker/Dockerfile.frontend \
            --target production \
            --build-arg VITE_API_URL="https://cost-fx.com/api/v1" .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "built=true" >> $GITHUB_OUTPUT
          echo "✅ Frontend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG"

  # Deploy to ECS (only if push to main/develop)
  deploy:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Download current backend task definition
        if: needs.build.outputs.backend_built == 'true'
        run: |
          echo "📥 Downloading current backend task definition..."
          aws ecs describe-task-definition \
            --task-definition costfx-dev-backend \
            --query taskDefinition > backend-task-definition.json

      - name: Update backend task definition
        if: needs.build.outputs.backend_built == 'true'
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          container-name: costfx-dev-backend
          image: ${{ needs.build.outputs.backend_image }}

      - name: Deploy backend to ECS
        if: needs.build.outputs.backend_built == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Download current frontend task definition
        if: needs.build.outputs.frontend_built == 'true'
        run: |
          echo "📥 Downloading current frontend task definition..."
          aws ecs describe-task-definition \
            --task-definition costfx-dev-frontend \
            --query taskDefinition > frontend-task-definition.json

      - name: Update frontend task definition
        if: needs.build.outputs.frontend_built == 'true'
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-definition.json
          container-name: costfx-dev-frontend
          image: ${{ needs.build.outputs.frontend_image }}

      - name: Deploy frontend to ECS
        if: needs.build.outputs.frontend_built == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # Health check deployment
  health-check:
    needs: [setup, build, deploy]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Health check backend
        if: needs.build.outputs.backend_built == 'true'
        run: |
          echo "🏥 Testing backend health..."
          BACKEND_URL="https://cost-fx.com/api/v1"
          
          for i in {1..20}; do
            if curl -f -s --connect-timeout 10 --max-time 30 "$BACKEND_URL/" > /dev/null; then
              echo "✅ Backend is healthy!"
              break
            fi
            echo "Attempt $i/20: Backend not ready, waiting 30s..."
            if [ $i -eq 20 ]; then
              echo "❌ Backend health check failed after 10 minutes"
              exit 1
            fi
            sleep 30
          done

      - name: Health check frontend
        if: needs.build.outputs.frontend_built == 'true'
        run: |
          echo "🏥 Testing frontend health..."
          FRONTEND_URL="https://cost-fx.com"
          
          for i in {1..20}; do
            if curl -f -s --connect-timeout 10 --max-time 30 "$FRONTEND_URL" > /dev/null; then
              echo "✅ Frontend is healthy!"
              break
            fi
            echo "Attempt $i/20: Frontend not ready, waiting 30s..."
            if [ $i -eq 20 ]; then
              echo "❌ Frontend health check failed after 10 minutes"
              exit 1
            fi
            sleep 30
          done

      - name: Test core API endpoints
        if: needs.build.outputs.backend_built == 'true'
        run: |
          echo "🧪 Testing core API endpoints..."
          BACKEND_URL="https://cost-fx.com/api/v1"
          
          # Test restaurant endpoints
          curl -f -s --connect-timeout 10 --max-time 30 "$BACKEND_URL/restaurants" || echo "⚠️ Restaurants endpoint not ready"
          
          # Test agent endpoints  
          curl -f -s --connect-timeout 10 --max-time 30 "$BACKEND_URL/agents/health" || echo "⚠️ Agents health endpoint not ready"

      - name: Deployment summary
        run: |
          echo "## 🚀 App Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Tests Passed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.setup.outputs.backend_changed }}" == "true" ]]; then
            echo "- **Backend Tests**: All tests passed ✅" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.setup.outputs.frontend_changed }}" == "true" ]]; then
            echo "- **Frontend Tests**: All tests passed ✅" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Docker Builds**: All containers built successfully ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting**: Completed (warnings allowed) ⚠️" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production (cost-fx.com)" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend URL**: https://cost-fx.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend URL**: https://cost-fx.com/api/v1" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build.outputs.backend_built }}" == "true" ]]; then
            echo "- **Backend Image**: ${{ needs.build.outputs.backend_image }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.build.outputs.frontend_built }}" == "true" ]]; then
            echo "- **Frontend Image**: ${{ needs.build.outputs.frontend_image }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Fast ECS deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_This deployment only updated application code. For infrastructure changes, use the manual deploy script._" >> $GITHUB_STEP_SUMMARY
